"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim-Plug Manager
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'

" color themes
Plug 'sonph/onehalf', {'rtp': 'vim/'}

Plug 'tpope/vim-commentary'

Plug 'jiangmiao/auto-pairs'

Plug '907th/vim-auto-save'
let g:auto_save=1

Plug 'vim-autoformat/vim-autoformat'
" au BufWrite * :Autoformat
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

Plug 'preservim/nerdtree'
Plug 'ryanoasis/vim-devicons'
nmap <F2> :NERDTreeToggle<CR>
" exit vim if NERDTree is the only window remaining in the only tab
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists(
            \ 'b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

Plug 'preservim/tagbar'
nmap <F3> :TagbarToggle<CR>

set rtp+=/opt/homebrew/opt/fzf
Plug 'junegunn/fzf.vim'
" use c-p to start fzf search
nmap <C-p> :Files<CR>
" use c-x to split and c-v to vsplit after fzf search

" use \rg to start rg search
nmap <leader>rg :Rg<CR>

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'honza/vim-snippets'

" ---------- airline ----------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1

" color themes
" let g:airline_theme='dark'
let g:airline_theme='powerlineish'
" let g:airline_theme='base16'
" let g:airline_theme='minimalist'

" tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'

" Manage buffer tab
nmap <C-H> :bp<CR>
nmap <C-L> :bn<CR>
" ---------- airline ----------

" Initialize plugin system
call plug#end()



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use vim mode
set nocompatible

"basic
syntax on
set number
set relativenumber
set mouse+=a
set clipboard=unnamed
set backspace=indent,eol,start
set encoding=utf-8
set scrolloff=6

" set color theme
set t_Co=256
set cursorline
set background=dark
colorscheme onehalfdark

" set color for completion popups
" rider theme
hi Pmenu ctermfg=251 ctermbg=237 guifg=#282c34 guibg=#dcdfe4
hi PmenuSel ctermfg=231 ctermbg=25 guifg=#dcdfe4 guibg=#61afef
hi PmenuSbar ctermbg=237 guibg=#474e5d
hi PmenuThumb ctermbg=239 guibg=#dcdfe4
" sharp theme
" hi Pmenu ctermfg=255 ctermbg=237 guifg=#282c34 guibg=#dcdfe4
" hi PmenuSel ctermfg=235 ctermbg=255 guifg=#dcdfe4 guibg=#61afef
" hi PmenuSbar ctermbg=245 guibg=#474e5d
" hi PmenuThumb ctermbg=255 guibg=#dcdfe4

" Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
let &t_EI.="\e[2 q" "EI = NORMAL mode
let &t_SI.="\e[6 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode

" search
set ignorecase
set smartcase
set incsearch
set hlsearch

" set tab and indent
set tabstop=4  " each tab is 4 spaces
set expandtab  " use spaces instead of tabs
set autoindent
set smartindent
set shiftwidth=4
set softtabstop=4

" no annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Coc.nvim Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `<C-k>` and `<C-j>` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> <C-k> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-j> <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)
